// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://eabilbay:ipSQ939fgVBYppy8@cluster0.tavedyn.mongodb.net/Spatifillum"
}


model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text_kz String?
  text_ru String?
  test  Test @relation(fields: [testId], references: [id])
  testId String @db.ObjectId
  order Int
  options Option[]
  userAnswers UserAnswer[]
  users User[]
}

model Option {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    text_kz String?
    text_ru String?
    points Int?
    question Question @relation(fields: [questionId], references: [id])
    questionId String @db.ObjectId
    userAnswers UserAnswer[]
}

model Test {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  order Int
  questions Question[]
  users User[]
}

model UserAnswer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  question Question @relation(fields: [questionId], references: [id])
  questionId String @db.ObjectId
  option Option @relation(fields: [optionId], references: [id])
  optionId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  answer String?
  @@unique([userId, questionId])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  telegram_id String?
  full_name String?
  cur_test Test @relation(fields: [cur_testId], references: [id])
  cur_question Question @relation(fields: [cur_questionId], references: [id])
  cur_questionId String @db.ObjectId
  cur_testId String @db.ObjectId
  @@unique([telegram_id])
  userAnswers UserAnswer[]
}

